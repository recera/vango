// Code generated by vango; DO NOT EDIT.

package builder

import (
	"github.com/recera/vango/pkg/vango/vdom"
)

// ElementBuilder provides a fluent interface for building VNodes
type ElementBuilder struct {
	tag      string
	props    vdom.Props
	children []*vdom.VNode
	isVoid   bool
}

// newBuilder creates a new element builder
func newBuilder(tag string, isVoid bool) *ElementBuilder {
	return &ElementBuilder{
		tag:      tag,
		props:    make(vdom.Props),
		children: make([]*vdom.VNode, 0),
		isVoid:   isVoid,
	}
}

// Build creates the VNode
func (b *ElementBuilder) Build() *vdom.VNode {
	if b.isVoid {
		return vdom.NewElement(b.tag, b.props)
	}
	return vdom.NewElement(b.tag, b.props, b.children...)
}

// === Common Attributes ===

// ID sets the id attribute
func (b *ElementBuilder) ID(id string) *ElementBuilder {
	b.props["id"] = id
	return b
}

// Class sets the class attribute
func (b *ElementBuilder) Class(class string) *ElementBuilder {
	b.props["class"] = class
	return b
}

// Style sets the style attribute
func (b *ElementBuilder) Style(style string) *ElementBuilder {
	b.props["style"] = style
	return b
}

// Title sets the title attribute
func (b *ElementBuilder) Title(title string) *ElementBuilder {
	b.props["title"] = title
	return b
}

// Hidden sets the hidden attribute
func (b *ElementBuilder) Hidden(hidden bool) *ElementBuilder {
	if hidden {
		b.props["hidden"] = true
	}
	return b
}

// TabIndex sets the tabindex attribute
func (b *ElementBuilder) TabIndex(index int) *ElementBuilder {
	b.props["tabindex"] = index
	return b
}

// === ARIA Attributes ===

// AriaLabel sets the aria-label attribute
func (b *ElementBuilder) AriaLabel(label string) *ElementBuilder {
	b.props["aria-label"] = label
	return b
}

// AriaHidden sets the aria-hidden attribute
func (b *ElementBuilder) AriaHidden(hidden bool) *ElementBuilder {
	if hidden {
		b.props["aria-hidden"] = "true"
	}
	return b
}

// Role sets the role attribute
func (b *ElementBuilder) Role(role string) *ElementBuilder {
	b.props["role"] = role
	return b
}

// === Event Handlers ===

// OnClick sets the onclick handler
func (b *ElementBuilder) OnClick(handler func()) *ElementBuilder {
	b.props["onclick"] = handler
	return b
}

// OnInput sets the oninput handler
func (b *ElementBuilder) OnInput(handler func(string)) *ElementBuilder {
	b.props["oninput"] = handler
	return b
}

// OnSubmit sets the onsubmit handler
func (b *ElementBuilder) OnSubmit(handler func()) *ElementBuilder {
	b.props["onsubmit"] = handler
	return b
}

// OnChange sets the onchange handler
func (b *ElementBuilder) OnChange(handler func(string)) *ElementBuilder {
	b.props["onchange"] = handler
	return b
}

// === Children ===

// Children adds child nodes
func (b *ElementBuilder) Children(children ...*vdom.VNode) *ElementBuilder {
	if !b.isVoid {
		b.children = append(b.children, children...)
	}
	return b
}

// Text adds a text child
func (b *ElementBuilder) Text(text string) *ElementBuilder {
	if !b.isVoid {
		b.children = append(b.children, vdom.NewText(text))
	}
	return b
}

// Ref provided in attributes.go to avoid duplication

// === Element Constructors ===

// Embedded elements

// Iframe creates a <iframe> element builder
func Iframe() *ElementBuilder {
	return newBuilder("iframe", false)
}

// Embed creates a <embed> element builder
func Embed() *ElementBuilder {
	return newBuilder("embed", true)
}

// Object creates a <object> element builder
func Object() *ElementBuilder {
	return newBuilder("object", false)
}

// Forms elements

// Form creates a <form> element builder
func Form() *ElementBuilder {
	return newBuilder("form", false)
}

// Input creates a <input> element builder
func Input() *ElementBuilder {
	return newBuilder("input", true)
}

// Textarea creates a <textarea> element builder
func Textarea() *ElementBuilder {
	return newBuilder("textarea", false)
}

// Select creates a <select> element builder
func Select() *ElementBuilder {
	return newBuilder("select", false)
}

// Option creates a <option> element builder
func Option() *ElementBuilder {
	return newBuilder("option", false)
}

// Optgroup creates a <optgroup> element builder
func Optgroup() *ElementBuilder {
	return newBuilder("optgroup", false)
}

// Button creates a <button> element builder
func Button() *ElementBuilder {
	return newBuilder("button", false)
}

// Label creates a <label> element builder
func Label() *ElementBuilder {
	return newBuilder("label", false)
}

// Fieldset creates a <fieldset> element builder
func Fieldset() *ElementBuilder {
	return newBuilder("fieldset", false)
}

// Legend creates a <legend> element builder
func Legend() *ElementBuilder {
	return newBuilder("legend", false)
}

// Datalist creates a <datalist> element builder
func Datalist() *ElementBuilder {
	return newBuilder("datalist", false)
}

// Output creates a <output> element builder
func Output() *ElementBuilder {
	return newBuilder("output", false)
}

// Graphics elements

// Canvas creates a <canvas> element builder
func Canvas() *ElementBuilder {
	return newBuilder("canvas", false)
}

// Svg creates a <svg> element builder
func Svg() *ElementBuilder {
	return newBuilder("svg", false)
}

// Inline_text elements

// A creates a <a> element builder
func A() *ElementBuilder {
	return newBuilder("a", false)
}

// Span creates a <span> element builder
func Span() *ElementBuilder {
	return newBuilder("span", false)
}

// Strong creates a <strong> element builder
func Strong() *ElementBuilder {
	return newBuilder("strong", false)
}

// Em creates a <em> element builder
func Em() *ElementBuilder {
	return newBuilder("em", false)
}

// B creates a <b> element builder
func B() *ElementBuilder {
	return newBuilder("b", false)
}

// I creates a <i> element builder
func I() *ElementBuilder {
	return newBuilder("i", false)
}

// U creates a <u> element builder
func U() *ElementBuilder {
	return newBuilder("u", false)
}

// S creates a <s> element builder
func S() *ElementBuilder {
	return newBuilder("s", false)
}

// Mark creates a <mark> element builder
func Mark() *ElementBuilder {
	return newBuilder("mark", false)
}

// Small creates a <small> element builder
func Small() *ElementBuilder {
	return newBuilder("small", false)
}

// Del creates a <del> element builder
func Del() *ElementBuilder {
	return newBuilder("del", false)
}

// Ins creates a <ins> element builder
func Ins() *ElementBuilder {
	return newBuilder("ins", false)
}

// Sub creates a <sub> element builder
func Sub() *ElementBuilder {
	return newBuilder("sub", false)
}

// Sup creates a <sup> element builder
func Sup() *ElementBuilder {
	return newBuilder("sup", false)
}

// Code creates a <code> element builder
func Code() *ElementBuilder {
	return newBuilder("code", false)
}

// Kbd creates a <kbd> element builder
func Kbd() *ElementBuilder {
	return newBuilder("kbd", false)
}

// Samp creates a <samp> element builder
func Samp() *ElementBuilder {
	return newBuilder("samp", false)
}

// Var creates a <var> element builder
func Var() *ElementBuilder {
	return newBuilder("var", false)
}

// Time creates a <time> element builder
func Time() *ElementBuilder {
	return newBuilder("time", false)
}

// Br creates a <br> element builder
func Br() *ElementBuilder {
	return newBuilder("br", true)
}

// Wbr creates a <wbr> element builder
func Wbr() *ElementBuilder {
	return newBuilder("wbr", true)
}

// Interactive elements

// Details creates a <details> element builder
func Details() *ElementBuilder {
	return newBuilder("details", false)
}

// Summary creates a <summary> element builder
func Summary() *ElementBuilder {
	return newBuilder("summary", false)
}

// Dialog creates a <dialog> element builder
func Dialog() *ElementBuilder {
	return newBuilder("dialog", false)
}

// Media elements

// Img creates a <img> element builder
func Img() *ElementBuilder {
	return newBuilder("img", true)
}

// Picture creates a <picture> element builder
func Picture() *ElementBuilder {
	return newBuilder("picture", false)
}

// Source creates a <source> element builder
func Source() *ElementBuilder {
	return newBuilder("source", true)
}

// Video creates a <video> element builder
func Video() *ElementBuilder {
	return newBuilder("video", false)
}

// Audio creates a <audio> element builder
func Audio() *ElementBuilder {
	return newBuilder("audio", false)
}

// Track creates a <track> element builder
func Track() *ElementBuilder {
	return newBuilder("track", true)
}

// Metadata elements

// Html creates a <html> element builder
func Html() *ElementBuilder {
	return newBuilder("html", false)
}

// Head creates a <head> element builder
func Head() *ElementBuilder {
	return newBuilder("head", false)
}

// Title creates a <title> element builder
func Title() *ElementBuilder {
	return newBuilder("title", false)
}

// Meta creates a <meta> element builder
func Meta() *ElementBuilder {
	return newBuilder("meta", true)
}

// Link creates a <link> element builder
func Link() *ElementBuilder {
	return newBuilder("link", true)
}

// Style creates a <style> element builder
func Style() *ElementBuilder {
	return newBuilder("style", false)
}

// Script creates a <script> element builder
func Script() *ElementBuilder {
	return newBuilder("script", false)
}

// Sectioning elements

// Body creates a <body> element builder
func Body() *ElementBuilder {
	return newBuilder("body", false)
}

// Article creates a <article> element builder
func Article() *ElementBuilder {
	return newBuilder("article", false)
}

// Section creates a <section> element builder
func Section() *ElementBuilder {
	return newBuilder("section", false)
}

// Nav creates a <nav> element builder
func Nav() *ElementBuilder {
	return newBuilder("nav", false)
}

// Aside creates a <aside> element builder
func Aside() *ElementBuilder {
	return newBuilder("aside", false)
}

// Header creates a <header> element builder
func Header() *ElementBuilder {
	return newBuilder("header", false)
}

// Footer creates a <footer> element builder
func Footer() *ElementBuilder {
	return newBuilder("footer", false)
}

// Main creates a <main> element builder
func Main() *ElementBuilder {
	return newBuilder("main", false)
}

// Svg_elements elements

// Path creates a <path> element builder
func Path() *ElementBuilder {
	return newBuilder("path", false)
}

// Circle creates a <circle> element builder
func Circle() *ElementBuilder {
	return newBuilder("circle", false)
}

// Rect creates a <rect> element builder
func Rect() *ElementBuilder {
	return newBuilder("rect", false)
}

// Line creates a <line> element builder
func Line() *ElementBuilder {
	return newBuilder("line", false)
}

// Polygon creates a <polygon> element builder
func Polygon() *ElementBuilder {
	return newBuilder("polygon", false)
}

// Polyline creates a <polyline> element builder
func Polyline() *ElementBuilder {
	return newBuilder("polyline", false)
}

// Ellipse creates a <ellipse> element builder
func Ellipse() *ElementBuilder {
	return newBuilder("ellipse", false)
}

// G creates a <g> element builder
func G() *ElementBuilder {
	return newBuilder("g", false)
}

// Defs creates a <defs> element builder
func Defs() *ElementBuilder {
	return newBuilder("defs", false)
}

// Symbol creates a <symbol> element builder
func Symbol() *ElementBuilder {
	return newBuilder("symbol", false)
}

// Use creates a <use> element builder
func Use() *ElementBuilder {
	return newBuilder("use", false)
}

// Svgtext creates a <svgtext> element builder
func Svgtext() *ElementBuilder {
	return newBuilder("svgtext", false)
}

// Tspan creates a <tspan> element builder
func Tspan() *ElementBuilder {
	return newBuilder("tspan", false)
}

// LinearGradient creates a <linearGradient> element builder
func LinearGradient() *ElementBuilder {
	return newBuilder("linearGradient", false)
}

// RadialGradient creates a <radialGradient> element builder
func RadialGradient() *ElementBuilder {
	return newBuilder("radialGradient", false)
}

// Stop creates a <stop> element builder
func Stop() *ElementBuilder {
	return newBuilder("stop", false)
}

// Pattern creates a <pattern> element builder
func Pattern() *ElementBuilder {
	return newBuilder("pattern", false)
}

// Mask creates a <mask> element builder
func Mask() *ElementBuilder {
	return newBuilder("mask", false)
}

// ClipPath creates a <clipPath> element builder
func ClipPath() *ElementBuilder {
	return newBuilder("clipPath", false)
}

// Filter creates a <filter> element builder
func Filter() *ElementBuilder {
	return newBuilder("filter", false)
}

// Animate creates a <animate> element builder
func Animate() *ElementBuilder {
	return newBuilder("animate", false)
}

// AnimateTransform creates a <animateTransform> element builder
func AnimateTransform() *ElementBuilder {
	return newBuilder("animateTransform", false)
}

// Image creates a <image> element builder
func Image() *ElementBuilder {
	return newBuilder("image", false)
}

// ForeignObject creates a <foreignObject> element builder
func ForeignObject() *ElementBuilder {
	return newBuilder("foreignObject", false)
}

// Switch creates a <switch> element builder
func Switch() *ElementBuilder {
	return newBuilder("switch", false)
}

// Svgtitle creates a <svgtitle> element builder
func Svgtitle() *ElementBuilder {
	return newBuilder("svgtitle", false)
}

// Desc creates a <desc> element builder
func Desc() *ElementBuilder {
	return newBuilder("desc", false)
}

// Metadata creates a <metadata> element builder
func Metadata() *ElementBuilder {
	return newBuilder("metadata", false)
}

// Tables elements

// Table creates a <table> element builder
func Table() *ElementBuilder {
	return newBuilder("table", false)
}

// Caption creates a <caption> element builder
func Caption() *ElementBuilder {
	return newBuilder("caption", false)
}

// Thead creates a <thead> element builder
func Thead() *ElementBuilder {
	return newBuilder("thead", false)
}

// Tbody creates a <tbody> element builder
func Tbody() *ElementBuilder {
	return newBuilder("tbody", false)
}

// Tfoot creates a <tfoot> element builder
func Tfoot() *ElementBuilder {
	return newBuilder("tfoot", false)
}

// Tr creates a <tr> element builder
func Tr() *ElementBuilder {
	return newBuilder("tr", false)
}

// Td creates a <td> element builder
func Td() *ElementBuilder {
	return newBuilder("td", false)
}

// Th creates a <th> element builder
func Th() *ElementBuilder {
	return newBuilder("th", false)
}

// Text_content elements

// Div creates a <div> element builder
func Div() *ElementBuilder {
	return newBuilder("div", false)
}

// P creates a <p> element builder
func P() *ElementBuilder {
	return newBuilder("p", false)
}

// H1 creates a <h1> element builder
func H1() *ElementBuilder {
	return newBuilder("h1", false)
}

// H2 creates a <h2> element builder
func H2() *ElementBuilder {
	return newBuilder("h2", false)
}

// H3 creates a <h3> element builder
func H3() *ElementBuilder {
	return newBuilder("h3", false)
}

// H4 creates a <h4> element builder
func H4() *ElementBuilder {
	return newBuilder("h4", false)
}

// H5 creates a <h5> element builder
func H5() *ElementBuilder {
	return newBuilder("h5", false)
}

// H6 creates a <h6> element builder
func H6() *ElementBuilder {
	return newBuilder("h6", false)
}

// Ul creates a <ul> element builder
func Ul() *ElementBuilder {
	return newBuilder("ul", false)
}

// Ol creates a <ol> element builder
func Ol() *ElementBuilder {
	return newBuilder("ol", false)
}

// Li creates a <li> element builder
func Li() *ElementBuilder {
	return newBuilder("li", false)
}

// Dl creates a <dl> element builder
func Dl() *ElementBuilder {
	return newBuilder("dl", false)
}

// Dt creates a <dt> element builder
func Dt() *ElementBuilder {
	return newBuilder("dt", false)
}

// Dd creates a <dd> element builder
func Dd() *ElementBuilder {
	return newBuilder("dd", false)
}

// Blockquote creates a <blockquote> element builder
func Blockquote() *ElementBuilder {
	return newBuilder("blockquote", false)
}

// Pre creates a <pre> element builder
func Pre() *ElementBuilder {
	return newBuilder("pre", false)
}

// Hr creates a <hr> element builder
func Hr() *ElementBuilder {
	return newBuilder("hr", true)
}
