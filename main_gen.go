// Code generated by vango build; DO NOT EDIT.
package main

import (
	"flag"
	"log"
	"net/http"
	"os"

	routes "github.com/recera/vango/internal/generated/routes"
	"github.com/recera/vango/pkg/live"
	"github.com/recera/vango/pkg/server"
)

func main() {
	// Parse flags
	var (
		port = flag.String("port", getEnv("PORT", "8080"), "Server port")
		host = flag.String("host", getEnv("HOST", "0.0.0.0"), "Server host")
	)
	flag.Parse()

	// Create live server for server-driven components
	liveServer := live.NewServer()

	// Create session manager
	sessionMgr := routes.NewSessionManager(liveServer)
	sessionMgr.StartCleanupRoutine()

	// Create router
	router := server.NewRouter()

	// Register all routes
	routes.RegisterRoutes(router, liveServer, sessionMgr)

	// Create HTTP mux
	mux := http.NewServeMux()

	// WebSocket endpoint for live updates
	mux.HandleFunc("/vango/live/", liveServer.HandleWebSocket)

	// Serve router table for client-side navigation
	mux.HandleFunc("/router/table.json", func(w http.ResponseWriter, r *http.Request) {
		w.Header().Set("Content-Type", "application/json")
		// Prefer project-level router table if exists
		if data, err := os.ReadFile("router/table.json"); err == nil {
			w.WriteHeader(http.StatusOK)
			_, _ = w.Write(data)
			return
		}
		// Fallback to empty payload
		_, _ = w.Write([]byte("{\"routes\":[]}"))
	})

	// Serve static files
	// Serve built WASM/bootstrap from dist/assets (production build layout)
	mux.Handle("/assets/", http.StripPrefix("/assets/", http.FileServer(http.Dir("dist/assets"))))
	mux.Handle("/public/", http.StripPrefix("/public/", http.FileServer(http.Dir("public"))))
	mux.Handle("/dist/", http.StripPrefix("/dist/", http.FileServer(http.Dir("dist"))))

	// Application routes
	mux.Handle("/", router)

	// Start server
	addr := *host + ":" + *port
	log.Printf("ðŸš€ Production server running at http://%s", addr)

	if err := http.ListenAndServe(addr, mux); err != nil {
		log.Fatal(err)
	}
}

func getEnv(key, defaultValue string) string {
	if value := os.Getenv(key); value != "" {
		return value
	}
	return defaultValue
}
