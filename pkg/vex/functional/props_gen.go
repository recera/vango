// Code generated by vango; DO NOT EDIT.

package functional

import (
	"github.com/recera/vango/pkg/vango/vdom"
)

// === Attribute Helpers ===

// Class creates a class property
func Class(class string) vdom.Props {
	return vdom.Props{"class": class}
}

// ID creates an id property
func ID(id string) vdom.Props {
	return vdom.Props{"id": id}
}

// StyleAttr creates a style attribute property
func StyleAttr(style string) vdom.Props {
	return vdom.Props{"style": style}
}

// Href creates an href property
func Href(href string) vdom.Props {
	return vdom.Props{"href": href}
}

// Target creates a target property
func Target(target string) vdom.Props {
	return vdom.Props{"target": target}
}

// Src creates a src property
func Src(src string) vdom.Props {
	return vdom.Props{"src": src}
}

// Alt creates an alt property
func Alt(alt string) vdom.Props {
	return vdom.Props{"alt": alt}
}

// Type creates a type property
func Type(t string) vdom.Props {
	return vdom.Props{"type": t}
}

// Value creates a value property
func Value(value string) vdom.Props {
	return vdom.Props{"value": value}
}

// Name creates a name property
func Name(name string) vdom.Props {
	return vdom.Props{"name": name}
}

// Placeholder creates a placeholder property
func Placeholder(placeholder string) vdom.Props {
	return vdom.Props{"placeholder": placeholder}
}

// === Boolean Attributes ===

// Disabled creates a disabled property
func Disabled(disabled bool) vdom.Props {
	if disabled {
		return vdom.Props{"disabled": true}
	}
	return vdom.Props{}
}

// Checked creates a checked property
func Checked(checked bool) vdom.Props {
	if checked {
		return vdom.Props{"checked": true}
	}
	return vdom.Props{}
}

// Required creates a required property
func Required(required bool) vdom.Props {
	if required {
		return vdom.Props{"required": true}
	}
	return vdom.Props{}
}

// Hidden creates a hidden property
func Hidden(hidden bool) vdom.Props {
	if hidden {
		return vdom.Props{"hidden": true}
	}
	return vdom.Props{}
}

// ReadOnly creates a readonly property
func ReadOnly(readonly bool) vdom.Props {
	if readonly {
		return vdom.Props{"readonly": true}
	}
	return vdom.Props{}
}

// === Event Handlers ===

// OnClick creates an onclick handler property
func OnClick(handler interface{}) vdom.Props {
	return vdom.Props{"onclick": handler}
}

// OnInput creates an oninput handler property
func OnInput(handler interface{}) vdom.Props {
	return vdom.Props{"oninput": handler}
}

// OnSubmit creates an onsubmit handler property
func OnSubmit(handler interface{}) vdom.Props {
	return vdom.Props{"onsubmit": handler}
}

// OnChange creates an onchange handler property
func OnChange(handler interface{}) vdom.Props {
	return vdom.Props{"onchange": handler}
}

// OnFocus creates an onfocus handler property
func OnFocus(handler interface{}) vdom.Props {
	return vdom.Props{"onfocus": handler}
}

// OnBlur creates an onblur handler property
func OnBlur(handler interface{}) vdom.Props {
	return vdom.Props{"onblur": handler}
}

// OnMouseDown creates an onmousedown handler property
func OnMouseDown(handler interface{}) vdom.Props { return vdom.Props{"onmousedown": handler} }

// OnMouseUp creates an onmouseup handler property
func OnMouseUp(handler interface{}) vdom.Props { return vdom.Props{"onmouseup": handler} }

// OnMouseMove creates an onmousemove handler property
func OnMouseMove(handler interface{}) vdom.Props { return vdom.Props{"onmousemove": handler} }

// OnWheel creates an onwheel handler property
func OnWheel(handler interface{}) vdom.Props { return vdom.Props{"onwheel": handler} }

// OnDblClick creates an ondblclick handler property
func OnDblClick(handler interface{}) vdom.Props { return vdom.Props{"ondblclick": handler} }

// === ARIA Attributes ===

// AriaLabel creates an aria-label property
func AriaLabel(label string) vdom.Props {
	return vdom.Props{"aria-label": label}
}

// AriaHidden creates an aria-hidden property
func AriaHidden(hidden bool) vdom.Props {
	if hidden {
		return vdom.Props{"aria-hidden": "true"}
	}
	return vdom.Props{}
}

// Role creates a role property
func Role(role string) vdom.Props {
	return vdom.Props{"role": role}
}

// === Helper Functions ===

// MergeProps merges multiple prop objects
func MergeProps(props ...vdom.Props) vdom.Props {
	merged := make(vdom.Props)
	for _, p := range props {
		for k, v := range p {
			merged[k] = v
		}
	}
	return merged
}

// Ref creates a ref property that receives the DOM element (js.Value) after creation/hydration
func Ref(ref interface{}) vdom.Props {
	if ref == nil {
		return vdom.Props{}
	}
	return vdom.Props{"ref": ref}
}
