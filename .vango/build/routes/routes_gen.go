// Code generated by vango dev; DO NOT EDIT.
//go:build vango_server || !vango_client
// +build vango_server !vango_client

package main

import (
	"log"
	"net/http"
	"os"

	"github.com/recera/vango/pkg/server"

	vdom "github.com/recera/vango/pkg/vango/vdom"

	routes "github.com/recera/vango/app/routes"
)

// CreateRouter creates and configures the router with API and SSR/universal page routes (server-driven handled by dev live server)
func CreateRouter() *server.Router {
	router := server.NewRouter()

	// Route: /

	// SSR/Universal page route
	router.AddRoute("/", func(ctx server.Ctx) (*vdom.VNode, error) {

		res := routes.IndexPage()
		var out *vdom.VNode
		switch v := any(res).(type) {
		case *vdom.VNode:
			out = v
		case vdom.VNode:
			out = &v
		}
		return out, nil

	})

	// Route: /about

	// SSR/Universal page route
	router.AddRoute("/about", func(ctx server.Ctx) (*vdom.VNode, error) {

		res := routes.AboutPage()
		var out *vdom.VNode
		switch v := any(res).(type) {
		case *vdom.VNode:
			out = v
		case vdom.VNode:
			out = &v
		}
		return out, nil

	})

	// Route: /counter

	// SSR/Universal page route
	router.AddRoute("/counter", func(ctx server.Ctx) (*vdom.VNode, error) {

		res := routes.CounterPage()
		var out *vdom.VNode
		switch v := any(res).(type) {
		case *vdom.VNode:
			out = v
		case vdom.VNode:
			out = &v
		}
		return out, nil

	})

	return router
}

// ServeHTTP handles HTTP requests (for plugin mode)
func ServeHTTP(w http.ResponseWriter, r *http.Request) {
	router := CreateRouter()
	router.ServeHTTP(w, r)
}

// Main function for subprocess mode
func main() {
	router := CreateRouter()

	port := os.Getenv("VANGO_ROUTE_PORT")
	if port == "" {
		port = "8081"
	}

	log.Printf("Route server listening on :%s", port)
	if err := http.ListenAndServe(":"+port, router); err != nil {
		log.Fatal(err)
	}
}
