// Code generated by vango build; DO NOT EDIT.
//go:build !wasm
// +build !wasm

package routes

import (
	"log"

	"github.com/recera/vango/pkg/live"
	"github.com/recera/vango/pkg/server"
	"github.com/recera/vango/pkg/vango/vdom"

	routes "github.com/recera/vango/app/routes"
)

// RegisterRoutes registers all application routes
func RegisterRoutes(router *server.Router, liveServer *live.Server, sessionMgr *SessionManager) {
	// Create scheduler bridge for server components
	bridge := live.NewSchedulerBridge(liveServer)
	_ = bridge // Avoid unused warning

	// Route: /

	// Universal/client component
	router.AddRoute("/", func(ctx server.Ctx) (*vdom.VNode, error) {
		// Render static component

		node := routes.IndexPage()

		return &node, nil
	})

	// Route: /server_counter

	// Server-driven component
	router.AddRoute("/server_counter", func(ctx server.Ctx) (*vdom.VNode, error) {
		// Get session
		sessionID := getSessionID(ctx)
		session, _ := sessionMgr.GetSession(sessionID)
		if session == nil {
			// Create new session if needed
			// This would normally happen in middleware
			log.Printf("Warning: No session for request to %s", ctx.Path())
		}
		// Call server handler
		vnode, err := routes.ServerCounterPage(ctx)
		if err != nil {
			return nil, err
		}
		// Inject minimal client for server-driven components
		vnode = server.InjectServerDrivenClient(vnode, sessionID)
		return vnode, nil
	})

	// Register 404 handler
	router.SetNotFound(handle404)

	// Register 500 handler
	router.SetErrorPage(handle500)

	log.Printf("âœ… Registered %d routes for production", 2)
}

// handle404 renders the 404 page
func handle404(ctx server.Ctx) (*vdom.VNode, error) {
	ctx.Status(404)
	// Check if custom 404 exists

	return defaultNotFound(ctx)

}

// handle500 renders the 500 error page
func handle500(ctx server.Ctx) (*vdom.VNode, error) {
	ctx.Status(500)
	// Check if custom 500 exists

	return defaultError(ctx)

}

// Helper functions
func getSessionID(ctx server.Ctx) string {
	// Extract session ID from cookie or header
	if cookie, err := ctx.Request().Cookie("vango-session"); err == nil {
		return cookie.Value
	}
	return ""
}

func defaultNotFound(ctx server.Ctx) (*vdom.VNode, error) {
	return &vdom.VNode{
		Kind: vdom.KindElement,
		Tag:  "div",
		Kids: []vdom.VNode{
			{Kind: vdom.KindElement, Tag: "h1", Kids: []vdom.VNode{{Kind: vdom.KindText, Text: "404 - Not Found"}}},
			{Kind: vdom.KindElement, Tag: "p", Kids: []vdom.VNode{{Kind: vdom.KindText, Text: "The page you're looking for doesn't exist."}}},
		},
	}, nil
}

func defaultError(ctx server.Ctx) (*vdom.VNode, error) {
	return &vdom.VNode{
		Kind: vdom.KindElement,
		Tag:  "div",
		Kids: []vdom.VNode{
			{Kind: vdom.KindElement, Tag: "h1", Kids: []vdom.VNode{{Kind: vdom.KindText, Text: "500 - Internal Server Error"}}},
			{Kind: vdom.KindElement, Tag: "p", Kids: []vdom.VNode{{Kind: vdom.KindText, Text: "Something went wrong. Please try again later."}}},
		},
	}, nil
}
