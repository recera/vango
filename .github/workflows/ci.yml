name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: ['1.22']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go-version }}
    
    - name: Install TinyGo
      run: |
        wget https://github.com/tinygo-org/tinygo/releases/download/v0.33.0/tinygo_0.33.0_amd64.deb
        sudo dpkg -i tinygo_0.33.0_amd64.deb
        tinygo version
    
    - name: Get dependencies
      run: |
        go mod download
        go mod verify
    
    - name: Run tests
      run: |
        go test -v -race ./pkg/...
    
    - name: Build WASM
      run: |
        cd examples/counter
        tinygo build -o app.wasm -target wasm -no-debug -opt 2 ./app/main.go
        ls -lh app.wasm
    
    - name: Check WASM size
      run: |
        cd examples/counter
        SIZE=$(stat -c%s app.wasm)
        echo "WASM size: $SIZE bytes"
        if [ $SIZE -gt 819200 ]; then
          echo "WASM size exceeds 800KB limit!"
          exit 1
        fi

  lint:
    name: Lint
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.22'
    
    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v6
      with:
        version: latest
        args: --timeout=5m

  build-cli:
    name: Build CLI
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.22'
    
    - name: Build vango CLI
      run: |
        cd cmd/vango
        go build -o vango
        ./vango --version