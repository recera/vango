package gen

import (
	"bytes"
	"fmt"
	"go/format"
	"os"
	"path/filepath"
	"strings"
	"text/template"
	
	"gopkg.in/yaml.v3"
)

// BuilderGeneratorNew generates the fluent builder API with SVG support
type BuilderGeneratorNew struct {
	spec *HTMLSpec
}

// NewBuilderGeneratorNew creates a new builder generator
func NewBuilderGeneratorNew(specPath string) (*BuilderGeneratorNew, error) {
	// Read spec file
	data, err := os.ReadFile(specPath)
	if err != nil {
		return nil, fmt.Errorf("failed to read spec file: %w", err)
	}
	
	// Parse YAML
	var spec HTMLSpec
	if err := yaml.Unmarshal(data, &spec); err != nil {
		return nil, fmt.Errorf("failed to parse spec: %w", err)
	}
	
	return &BuilderGeneratorNew{spec: &spec}, nil
}

// Generate creates all builder API files
func (g *BuilderGeneratorNew) Generate() error {
	// Generate Layer 1 (fluent builder API)
	if err := g.generateBuilderAPI(); err != nil {
		return fmt.Errorf("failed to generate builder API: %w", err)
	}
	
	return nil
}

// generateBuilderAPI generates the fluent builder API (Layer 1)
func (g *BuilderGeneratorNew) generateBuilderAPI() error {
	tmpl := `// Code generated by vango; DO NOT EDIT.

package builder

import (
	"github.com/recera/vango/pkg/vango/vdom"
)

// ElementBuilder provides a fluent interface for building VNodes
type ElementBuilder struct {
	tag      string
	props    vdom.Props
	children []*vdom.VNode
	isVoid   bool
	namespace string
}

// newBuilder creates a new element builder
func newBuilder(tag string, isVoid bool) *ElementBuilder {
	return &ElementBuilder{
		tag:      tag,
		props:    make(vdom.Props),
		children: make([]*vdom.VNode, 0),
		isVoid:   isVoid,
	}
}

// newSVGBuilder creates a new SVG element builder
func newSVGBuilder(tag string) *ElementBuilder {
	return &ElementBuilder{
		tag:      tag,
		props:    make(vdom.Props),
		children: make([]*vdom.VNode, 0),
		isVoid:   false,
		namespace: "http://www.w3.org/2000/svg",
	}
}

// Build creates the VNode
func (b *ElementBuilder) Build() *vdom.VNode {
	if b.isVoid {
		return vdom.NewElement(b.tag, b.props)
	}
	return vdom.NewElement(b.tag, b.props, b.children...)
}

// Child adds a single child node
func (b *ElementBuilder) Child(child *vdom.VNode) *ElementBuilder {
	if !b.isVoid && child != nil {
		b.children = append(b.children, child)
	}
	return b
}

// === Common Attributes ===

// ID sets the id attribute
func (b *ElementBuilder) ID(id string) *ElementBuilder {
	b.props["id"] = id
	return b
}

// Class sets the class attribute
func (b *ElementBuilder) Class(class string) *ElementBuilder {
	b.props["class"] = class
	return b
}

// Style sets the style attribute
func (b *ElementBuilder) Style(style string) *ElementBuilder {
	b.props["style"] = style
	return b
}

// Title sets the title attribute
func (b *ElementBuilder) Title(title string) *ElementBuilder {
	b.props["title"] = title
	return b
}

// Hidden sets the hidden attribute
func (b *ElementBuilder) Hidden(hidden bool) *ElementBuilder {
	if hidden {
		b.props["hidden"] = true
	}
	return b
}

// TabIndex sets the tabindex attribute
func (b *ElementBuilder) TabIndex(index int) *ElementBuilder {
	b.props["tabindex"] = index
	return b
}

// Attr sets a generic attribute
func (b *ElementBuilder) Attr(key string, value interface{}) *ElementBuilder {
	b.props[key] = value
	return b
}

// Href sets the href attribute (for links)
func (b *ElementBuilder) Href(href string) *ElementBuilder {
	b.props["href"] = href
	return b
}

// Src sets the src attribute (for images, scripts, etc)
func (b *ElementBuilder) Src(src string) *ElementBuilder {
	b.props["src"] = src
	return b
}

// Type sets the type attribute
func (b *ElementBuilder) Type(typ string) *ElementBuilder {
	b.props["type"] = typ
	return b
}

// Value sets the value attribute
func (b *ElementBuilder) Value(value string) *ElementBuilder {
	b.props["value"] = value
	return b
}

// Name sets the name attribute
func (b *ElementBuilder) Name(name string) *ElementBuilder {
	b.props["name"] = name
	return b
}

// Placeholder sets the placeholder attribute
func (b *ElementBuilder) Placeholder(placeholder string) *ElementBuilder {
	b.props["placeholder"] = placeholder
	return b
}

// Disabled sets the disabled attribute
func (b *ElementBuilder) Disabled(disabled bool) *ElementBuilder {
	if disabled {
		b.props["disabled"] = true
	}
	return b
}

// Required sets the required attribute
func (b *ElementBuilder) Required(required bool) *ElementBuilder {
	if required {
		b.props["required"] = true
	}
	return b
}

// Checked sets the checked attribute
func (b *ElementBuilder) Checked(checked bool) *ElementBuilder {
	if checked {
		b.props["checked"] = true
	}
	return b
}

// Selected sets the selected attribute
func (b *ElementBuilder) Selected(selected bool) *ElementBuilder {
	if selected {
		b.props["selected"] = true
	}
	return b
}

// Alt sets the alt attribute (for images)
func (b *ElementBuilder) Alt(alt string) *ElementBuilder {
	b.props["alt"] = alt
	return b
}

// Width sets the width attribute
func (b *ElementBuilder) Width(width interface{}) *ElementBuilder {
	b.props["width"] = width
	return b
}

// Height sets the height attribute
func (b *ElementBuilder) Height(height interface{}) *ElementBuilder {
	b.props["height"] = height
	return b
}

// For sets the for attribute (for labels)
func (b *ElementBuilder) For(forID string) *ElementBuilder {
	b.props["for"] = forID
	return b
}

// Target sets the target attribute (for links)
func (b *ElementBuilder) Target(target string) *ElementBuilder {
	b.props["target"] = target
	return b
}

// Rel sets the rel attribute (for links)
func (b *ElementBuilder) Rel(rel string) *ElementBuilder {
	b.props["rel"] = rel
	return b
}

// Action sets the action attribute (for forms)
func (b *ElementBuilder) Action(action string) *ElementBuilder {
	b.props["action"] = action
	return b
}

// Method sets the method attribute (for forms)
func (b *ElementBuilder) Method(method string) *ElementBuilder {
	b.props["method"] = method
	return b
}

// DataAttr sets a data-* attribute
func (b *ElementBuilder) DataAttr(key string, value interface{}) *ElementBuilder {
	b.props["data-"+key] = value
	return b
}

// === SVG-Specific Attributes ===

// ViewBox sets the viewBox attribute (for SVG elements)
func (b *ElementBuilder) ViewBox(viewBox string) *ElementBuilder {
	b.props["viewBox"] = viewBox
	return b
}

// Fill sets the fill attribute (for SVG elements)
func (b *ElementBuilder) Fill(fill string) *ElementBuilder {
	b.props["fill"] = fill
	return b
}

// Stroke sets the stroke attribute (for SVG elements)
func (b *ElementBuilder) Stroke(stroke string) *ElementBuilder {
	b.props["stroke"] = stroke
	return b
}

// StrokeWidth sets the stroke-width attribute (for SVG elements)
func (b *ElementBuilder) StrokeWidth(width string) *ElementBuilder {
	b.props["stroke-width"] = width
	return b
}

// StrokeLinecap sets the stroke-linecap attribute (for SVG elements)
func (b *ElementBuilder) StrokeLinecap(linecap string) *ElementBuilder {
	b.props["stroke-linecap"] = linecap
	return b
}

// StrokeLinejoin sets the stroke-linejoin attribute (for SVG elements)
func (b *ElementBuilder) StrokeLinejoin(linejoin string) *ElementBuilder {
	b.props["stroke-linejoin"] = linejoin
	return b
}

// StrokeDasharray sets the stroke-dasharray attribute (for SVG elements)
func (b *ElementBuilder) StrokeDasharray(dasharray string) *ElementBuilder {
	b.props["stroke-dasharray"] = dasharray
	return b
}

// D sets the d attribute (for SVG path elements)
func (b *ElementBuilder) D(d string) *ElementBuilder {
	b.props["d"] = d
	return b
}

// Cx sets the cx attribute (for SVG circle/ellipse elements)
func (b *ElementBuilder) Cx(cx string) *ElementBuilder {
	b.props["cx"] = cx
	return b
}

// Cy sets the cy attribute (for SVG circle/ellipse elements)
func (b *ElementBuilder) Cy(cy string) *ElementBuilder {
	b.props["cy"] = cy
	return b
}

// R sets the r attribute (for SVG circle elements)
func (b *ElementBuilder) R(r string) *ElementBuilder {
	b.props["r"] = r
	return b
}

// Rx sets the rx attribute (for SVG rect/ellipse elements)
func (b *ElementBuilder) Rx(rx string) *ElementBuilder {
	b.props["rx"] = rx
	return b
}

// Ry sets the ry attribute (for SVG rect/ellipse elements)
func (b *ElementBuilder) Ry(ry string) *ElementBuilder {
	b.props["ry"] = ry
	return b
}

// X sets the x attribute (for SVG elements)
func (b *ElementBuilder) X(x string) *ElementBuilder {
	b.props["x"] = x
	return b
}

// Y sets the y attribute (for SVG elements)
func (b *ElementBuilder) Y(y string) *ElementBuilder {
	b.props["y"] = y
	return b
}

// X1 sets the x1 attribute (for SVG line elements)
func (b *ElementBuilder) X1(x1 string) *ElementBuilder {
	b.props["x1"] = x1
	return b
}

// Y1 sets the y1 attribute (for SVG line elements)
func (b *ElementBuilder) Y1(y1 string) *ElementBuilder {
	b.props["y1"] = y1
	return b
}

// X2 sets the x2 attribute (for SVG line elements)
func (b *ElementBuilder) X2(x2 string) *ElementBuilder {
	b.props["x2"] = x2
	return b
}

// Y2 sets the y2 attribute (for SVG line elements)
func (b *ElementBuilder) Y2(y2 string) *ElementBuilder {
	b.props["y2"] = y2
	return b
}

// Points sets the points attribute (for SVG polygon/polyline elements)
func (b *ElementBuilder) Points(points string) *ElementBuilder {
	b.props["points"] = points
	return b
}

// Transform sets the transform attribute (for SVG elements)
func (b *ElementBuilder) Transform(transform string) *ElementBuilder {
	b.props["transform"] = transform
	return b
}

// Opacity sets the opacity attribute (for SVG elements)
func (b *ElementBuilder) Opacity(opacity string) *ElementBuilder {
	b.props["opacity"] = opacity
	return b
}

// PreserveAspectRatio sets the preserveAspectRatio attribute (for SVG elements)
func (b *ElementBuilder) PreserveAspectRatio(ratio string) *ElementBuilder {
	b.props["preserveAspectRatio"] = ratio
	return b
}

// === ARIA Attributes ===

// AriaLabel sets the aria-label attribute
func (b *ElementBuilder) AriaLabel(label string) *ElementBuilder {
	b.props["aria-label"] = label
	return b
}

// AriaHidden sets the aria-hidden attribute
func (b *ElementBuilder) AriaHidden(hidden bool) *ElementBuilder {
	if hidden {
		b.props["aria-hidden"] = "true"
	}
	return b
}

// Role sets the role attribute
func (b *ElementBuilder) Role(role string) *ElementBuilder {
	b.props["role"] = role
	return b
}

// === Event Handlers ===

// OnClick sets the onclick handler
func (b *ElementBuilder) OnClick(handler func()) *ElementBuilder {
	b.props["onclick"] = handler
	return b
}

// OnInput sets the oninput handler
func (b *ElementBuilder) OnInput(handler func(string)) *ElementBuilder {
	b.props["oninput"] = handler
	return b
}

// OnSubmit sets the onsubmit handler
func (b *ElementBuilder) OnSubmit(handler func()) *ElementBuilder {
	b.props["onsubmit"] = handler
	return b
}

// OnChange sets the onchange handler
func (b *ElementBuilder) OnChange(handler func(string)) *ElementBuilder {
	b.props["onchange"] = handler
	return b
}

// === Children ===

// Children adds child nodes
func (b *ElementBuilder) Children(children ...*vdom.VNode) *ElementBuilder {
	if !b.isVoid {
		b.children = append(b.children, children...)
	}
	return b
}

// Text adds a text child
func (b *ElementBuilder) Text(text string) *ElementBuilder {
	if !b.isVoid {
		b.children = append(b.children, vdom.NewText(text))
	}
	return b
}

// === Element Constructors ===

// Text creates a text node directly (not a builder)
func Text(text string) *vdom.VNode {
	return vdom.NewText(text)
}

{{ range $category, $elements := .Elements }}
// {{ $category | title }} elements
{{ range $elements }}
{{ if eq .Namespace "http://www.w3.org/2000/svg" }}
// {{ .Tag | title }} creates a <{{ .Tag }}> SVG element builder
func {{ .Tag | title }}() *ElementBuilder {
	return newSVGBuilder("{{ .Tag }}")
}
{{ else }}
// {{ .Tag | title }} creates a <{{ .Tag }}> element builder
func {{ .Tag | title }}() *ElementBuilder {
	return newBuilder("{{ .Tag }}", {{ .Void }})
}
{{ end }}
{{ end }}
{{ end }}
`

	// Create output directory
	outputDir := filepath.Dir(g.spec.Generation.Layer1.Output)
	if err := os.MkdirAll(outputDir, 0755); err != nil {
		return err
	}
	
	// Generate code
	funcMap := template.FuncMap{
		"title": strings.Title,
	}
	
	t := template.Must(template.New("builder").Funcs(funcMap).Parse(tmpl))
	var buf bytes.Buffer
	if err := t.Execute(&buf, g.spec); err != nil {
		return err
	}
	
	// Format code
	formatted, err := format.Source(buf.Bytes())
	if err != nil {
		return fmt.Errorf("failed to format generated code: %w", err)
	}
	
	// Write file
	return os.WriteFile(g.spec.Generation.Layer1.Output, formatted, 0644)
}

// RunNew executes the builder generation with SVG support
func RunNew(specPath string) error {
	gen, err := NewBuilderGeneratorNew(specPath)
	if err != nil {
		return err
	}
	
	return gen.Generate()
}